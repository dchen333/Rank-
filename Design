This webapp was originally envisioned as an Android app. However, the learning curve for Android Studio was steep enough that I had to give up on it in the last few days and switch to the webtrack, which used languges I was much more comfortable with (python, javascript, HTML/CSS).

The concept however, was the same - implement a way to determine a top choice among many. The motivation is the difficulty that choosing something can be - watch to watch, where to eat, what to order, etc. In order to alleviate this, I sought to create a program using some sort of rate or sort algorithm to make a decision. 

The first step was thinking about what methodology to try. The simplest is inspired by a topological sort, where we look for an ordering of eleements that leads to one superlative element. This method is simple to set up, quick to go through, and is effective at choosing one top choice. However, it has a weakness when it comes to qualitative sorting because it relies on a transitive property. This isn't an issue with numbers, where 3>2 / 2>1 / 3>1 is a given, but there are corner cases where I might rather watch Game of Thrones over The Office and The Office over Parks n Rec, but not Game of Thrones over Parks n Rec. It also does not sort the "losing" choices.

Chess rating systems, such as ELO or Glicko rating system, were my second thought. In conjunction with qualitative, 1 on 1 decisions, these these could help determine an ordered sort with some insight into magnitude of preference, as well as solve cases where preference isn't transitive. However, they require a lot of "matchups" and take a lot of time to be superior to a topological sort. I ran into this same issue with other preference models - they either require too much sample to be usable, or too much preparation (e.g., conjoint analysis). As such, I chose topological - we can assume users are fairly rational and that the ease/speed of the method is the most important consideration for such a tool.

Once deciding on the method, implementation was rather straightforward. A user will input their choices into a form (input.html), which includes dynamic field adding for some flexibility. 

From there, it is implementing the topological sort. The first is simple, which is the shuffle the inputs once they are placed as elements in an array, which can help create more distinct "matchups." Next is to rely on transitivity and use a tournament style, 1v1 single elimination format for the elements. Users are given choices between two elements - winners "move on" to the next round as "picks" to prepare for the next round of selection. Transitivity is key here because when there are an odd number of elements/inputs, we automatically push unmatched elements to the next round. Once we go through the first round (traverse through the first array), we can reset and go through the next one of winners (traverse through the new “picks” array), and repeat this process until only one selection remains.

Everything else, primarily designed pages, are meant to support and make this an easy process.
